{"version":3,"sources":["Components/Global/AppContext.tsx","Components/TodoItem.tsx","Components/TodoList.tsx","Components/Header.tsx","Components/AddTodo.tsx","Components/ImagePreview.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["AppContext","createContext","TodoItem","todo","completed","id","title","useContext","markComplete","delTodo","type","checked","onChange","onClick","TodoList","todos","map","key","Header","className","AddTodo","useState","setTitle","addTodo","onSubmit","e","preventDefault","style","display","name","flex","padding","placeholder","value","target","autoComplete","ImagePreview","image","setImage","event","file","files","reader","FileReader","readAsDataURL","onload","result","onerror","error","console","log","accept","src","alt","App","setTodos","Provider","newTodo","uuid","v4","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAQaA,G,MAAaC,wBAAsC,OCqBjDC,EArB2B,SAAC,GAEpC,IAAD,IADJC,KAAQC,EACJ,EADIA,UAAWC,EACf,EADeA,GAAIC,EACnB,EADmBA,MACnB,EAC8BC,qBAAWP,GAArCQ,EADJ,EACIA,aAAcC,EADlB,EACkBA,QAEtB,OACE,6BACE,2BACE,2BACEC,KAAK,WACLC,QAASP,EACTQ,SAAU,kBAAMJ,EAAaH,MAE9B,GACAC,EACD,4BAAQO,QAAS,kBAAMJ,EAAQJ,KAA/B,QCLOS,EAV2B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,oCACGA,EAAMC,KAAI,SAAAb,GAAI,OACb,kBAAC,EAAD,CAAUc,IAAKd,EAAKE,GAAIF,KAAMA,SCDvBe,EATU,WACvB,OACE,yBAAKC,UAAU,UACb,sCC+BSC,EAjCW,WAAO,IAAD,EACJC,mBAAS,IADL,mBACvBf,EADuB,KAChBgB,EADgB,KAGtBC,EAAYhB,qBAAWP,GAAvBuB,QAcR,OACE,0BAAMC,SAba,SAACC,GACpBA,EAAEC,iBACGD,IAELF,EAAQjB,GACRgB,EAAS,MAQqBK,MAAO,CAAEC,QAAS,SAC9C,2BACElB,KAAK,OACLmB,KAAK,QACLF,MAAO,CAAEG,KAAM,KAAMC,QAAS,OAC9BC,YAAY,eACZC,MAAO3B,EACPM,SAZgB,SAACa,GACrBH,EAASG,EAAES,OAAOD,QAYdE,aAAa,QAEf,2BAAOzB,KAAK,SAASuB,MAAM,SAASN,MAAO,CAAEG,KAAM,S,gBCT1CM,EAnBgB,WAAO,IAAD,EACTf,mBAAS,IADA,mBAC5BgB,EAD4B,KACrBC,EADqB,KAWnC,OACE,6BACE,2BAAO5B,KAAK,OAAOE,SAVD,SAAC2B,GACrB,IAAMC,EAAOD,EAAML,OAAOO,MAAM,GAC5BC,EAAS,IAAIC,WACjBD,EAAOE,cAAcJ,GACrBE,EAAOG,OAAS,kBAAMP,EAASI,EAAOI,SACtCJ,EAAOK,QAAU,SAAAC,GAAK,OAAIC,QAAQC,IAAI,UAAWF,KAKHnB,KAAK,MAAMsB,OAAO,YAC9D,yBAAKC,IAAKf,EAAOgB,IAAI,cC6CZC,EApDO,WAAO,IAAD,EACAjC,mBAAS,IADT,mBACnBN,EADmB,KACZwC,EADY,KA8B1B,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACnB,EAAWwD,SAAZ,CACEvB,MAAO,CACLV,QAfM,SAACjB,GACf,IAAMmD,EAAU,CACdpD,GAAIqD,IAAKC,KACTrD,QACAF,WAAW,GAGbmD,EAAS,GAAD,mBAAKxC,GAAL,CAAY0C,MASZjD,aAjCW,SAACH,GACpBkD,EACExC,EAAMC,KAAI,SAAAb,GACR,OAAOA,EAAKE,KAAOA,EAAZ,eAEEF,EAFF,CAGDC,WAAYD,EAAKC,YAEnBD,OA0BAM,QArBM,SAACJ,GACfkD,EAASxC,EAAM6C,QAAO,SAAAzD,GAAI,OAAIA,EAAKE,KAAOA,SAuBpC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEU,MAAOA,QC1CC8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7e9e69bd.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\ninterface AppContextProps {\n  addTodo: (title: string) => void;\n  markComplete: (id: string) => void;\n  delTodo: (id: string) => void;\n}\n\nexport const AppContext = createContext<AppContextProps | null>(null);\n","import React, { useContext } from \"react\";\nimport TODO from \"./types\";\nimport { AppContext } from \"./Global/AppContext\";\n\ninterface TodoItemProps {\n  todo: TODO;\n}\n\nconst TodoItem: React.FC<TodoItemProps> = ({\n  todo: { completed, id, title }\n}) => {\n  const { markComplete, delTodo } = useContext(AppContext);\n\n  return (\n    <div>\n      <p>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={() => markComplete(id)}\n        />\n        {\"\"}\n        {title}\n        <button onClick={() => delTodo(id)}>x</button>\n      </p>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport TODO from \"./types\";\n\ninterface TodoListProps {\n  todos: TODO[];\n}\n\nconst TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <>\n      {todos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n    </>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\n\nconst Header: React.FC = () => {\n  return (\n    <div className=\"header\">\n      <h1>Todo</h1>\n    </div>\n  );\n};\n\n\nexport default Header;\n","import React, { useState, FormEvent, ChangeEvent, useContext } from \"react\";\nimport { AppContext } from \"./Global/AppContext\";\n\nconst AddTodo: React.FC = () => {\n  const [title, setTitle] = useState(\"\");\n\n  const { addTodo } = useContext(AppContext);\n\n  const onFormSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!e) return;\n\n    addTodo(title);\n    setTitle(\"\");\n  };\n\n  const onTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n\n  return (\n    <form onSubmit={onFormSubmit} style={{ display: \"flex\" }}>\n      <input\n        type=\"text\"\n        name=\"title\"\n        style={{ flex: \"10\", padding: \"5px\" }}\n        placeholder=\"Add Todo ...\"\n        value={title}\n        onChange={onTitleChange}\n        autoComplete=\"off\"\n      />\n      <input type=\"submit\" value=\"submit\" style={{ flex: \"1\" }} />\n    </form>\n  );\n};\n\nexport default AddTodo;\n","import React, { ChangeEvent, useState } from \"react\";\n\n\nconst ImagePreview: React.FC = () => {\n  const [image, setImage] = useState(\"\");\n\n  const onImageUpload = (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files[0];\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => setImage(reader.result as string);\n    reader.onerror = error => console.log(\"Error: \", error);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={onImageUpload} name=\"img\" accept=\"image/*\" />\n      <img src={image} alt=\"preview\" />\n    </div>\n  );\n};\n\nexport default ImagePreview;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport TodoList from \"./Components/TodoList\";\nimport Header from \"./Components/Header\";\nimport AddTodo from \"./Components/AddTodo\";\nimport uuid from \"uuid\";\nimport TODO from \"./Components/types\";\nimport ImagePreview from \"./Components/ImagePreview\";\nimport { AppContext } from \"./Components/Global/AppContext\";\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState([] as TODO[]);\n\n  const markComplete = (id: string) => {\n    setTodos(\n      todos.map(todo => {\n        return todo.id === id\n          ? {\n              ...todo,\n              completed: !todo.completed // Return a new object or use Object.Assign\n            }\n          : todo;\n      })\n    );\n  };\n\n  const delTodo = (id: string) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const addTodo = (title: string) => {\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    };\n\n    setTodos([...todos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Container\">\n        <AppContext.Provider\n          value={{\n            addTodo: addTodo,\n            markComplete: markComplete,\n            delTodo: delTodo\n          }}\n        >\n          <Header />\n          <ImagePreview />\n          <AddTodo />\n          <TodoList\n            todos={todos}\n          />\n        </AppContext.Provider>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}